// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;
using Microsoft.ML.Probabilistic.Collections;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.4.2203.202 at 10:44 AM on Sunday, July 24, 2022.
	/// </remarks>
	public partial class Model_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Changed_IsCorrect_numberOfIterations_peopleNum_questionNum_SkillNumPerQuestionArray_SkillsNeededArra0 has executed. Set this to false to force re-execution of Changed_IsCorrect_numberOfIterations_peopleNum_questionNum_SkillNumPerQuestionArray_SkillsNeededArra0</summary>
		public bool Changed_IsCorrect_numberOfIterations_peopleNum_questionNum_SkillNumPerQuestionArray_SkillsNeededArra0_isDone;
		/// <summary>True if Changed_IsCorrect_peopleNum_questionNum has executed. Set this to false to force re-execution of Changed_IsCorrect_peopleNum_questionNum</summary>
		public bool Changed_IsCorrect_peopleNum_questionNum_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_peopleNum_questionNum_SkillNumPerQuestionArray_Init_IsCorrect_Sk4 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_peopleNum_questionNum_SkillNumPerQuestionArray_Init_IsCorrect_Sk4</summary>
		public bool Changed_numberOfIterationsDecreased_peopleNum_questionNum_SkillNumPerQuestionArray_Init_IsCorrect_Sk4_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_peopleNum_questionNum_SkillNumPerQuestionArray_Init_IsCorrect_Sk4 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_peopleNum_questionNum_SkillNumPerQuestionArray_Init_IsCorrect_Sk4</summary>
		public bool Changed_numberOfIterationsDecreased_peopleNum_questionNum_SkillNumPerQuestionArray_Init_IsCorrect_Sk4_isInitialised;
		/// <summary>True if Changed_peopleNum has executed. Set this to false to force re-execution of Changed_peopleNum</summary>
		public bool Changed_peopleNum_isDone;
		/// <summary>True if Changed_peopleNum_questionNum has executed. Set this to false to force re-execution of Changed_peopleNum_questionNum</summary>
		public bool Changed_peopleNum_questionNum_isDone;
		/// <summary>True if Changed_peopleNum_questionNum_SkillNumPerQuestionArray has executed. Set this to false to force re-execution of Changed_peopleNum_questionNum_SkillNumPerQuestionArray</summary>
		public bool Changed_peopleNum_questionNum_SkillNumPerQuestionArray_isDone;
		/// <summary>True if Changed_questionNum has executed. Set this to false to force re-execution of Changed_questionNum</summary>
		public bool Changed_questionNum_isDone;
		/// <summary>True if Changed_SkillNumPerQuestionArray has executed. Set this to false to force re-execution of Changed_SkillNumPerQuestionArray</summary>
		public bool Changed_SkillNumPerQuestionArray_isDone;
		/// <summary>True if Changed_SkillsNeededArray has executed. Set this to false to force re-execution of Changed_SkillsNeededArray</summary>
		public bool Changed_SkillsNeededArray_isDone;
		/// <summary>True if Changed_skillsNum has executed. Set this to false to force re-execution of Changed_skillsNum</summary>
		public bool Changed_skillsNum_isDone;
		/// <summary>Field backing the IsCorrect property</summary>
		private bool[][] isCorrect;
		/// <summary>Message to marginal of 'IsCorrect'</summary>
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> IsCorrect_marginal_F;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the peopleNum property</summary>
		private int PeopleNum;
		/// <summary>Message to marginal of 'peopleNum'</summary>
		public PointMass<int> peopleNum_marginal_F;
		/// <summary>Field backing the questionNum property</summary>
		private int QuestionNum;
		/// <summary>Message to marginal of 'questionNum'</summary>
		public PointMass<int> questionNum_marginal_F;
		public DistributionStructArray<Bernoulli,bool>[][] relevantSkills_B;
		/// <summary>Field backing the SkillNumPerQuestionArray property</summary>
		private int[] skillNumPerQuestionArray;
		/// <summary>Message to marginal of 'SkillNumPerQuestionArray'</summary>
		public PointMass<int[]> SkillNumPerQuestionArray_marginal_F;
		/// <summary>Message to marginal of 'skills'</summary>
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> skills_marginal_F;
		/// <summary>Field backing the SkillsNeededArray property</summary>
		private int[][] skillsNeededArray;
		/// <summary>Message to marginal of 'SkillsNeededArray'</summary>
		public PointMass<int[][]> SkillsNeededArray_marginal_F;
		/// <summary>Field backing the skillsNum property</summary>
		private int SkillsNum;
		/// <summary>Message to marginal of 'skillsNum'</summary>
		public PointMass<int> skillsNum_marginal_F;
		#endregion

		#region Properties
		/// <summary>The externally-specified value of 'IsCorrect'</summary>
		public bool[][] IsCorrect
		{
			get {
				return this.isCorrect;
			}
			set {
				if ((value!=null)&&(value.Length!=this.PeopleNum)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.PeopleNum)+" was expected for variable \'IsCorrect\'");
				}
				this.isCorrect = value;
				this.numberOfIterationsDone = 0;
				this.Changed_IsCorrect_peopleNum_questionNum_isDone = false;
				this.Changed_numberOfIterationsDecreased_peopleNum_questionNum_SkillNumPerQuestionArray_Init_IsCorrect_Sk4_isInitialised = false;
				this.Changed_IsCorrect_numberOfIterations_peopleNum_questionNum_SkillNumPerQuestionArray_SkillsNeededArra0_isDone = false;
			}
		}

		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'peopleNum'</summary>
		public int peopleNum
		{
			get {
				return this.PeopleNum;
			}
			set {
				if (this.PeopleNum!=value) {
					this.PeopleNum = value;
					this.numberOfIterationsDone = 0;
					this.Changed_IsCorrect_peopleNum_questionNum_isDone = false;
					this.Changed_peopleNum_isDone = false;
					this.Changed_peopleNum_questionNum_isDone = false;
					this.Changed_peopleNum_questionNum_SkillNumPerQuestionArray_isDone = false;
					this.Changed_numberOfIterationsDecreased_peopleNum_questionNum_SkillNumPerQuestionArray_Init_IsCorrect_Sk4_isDone = false;
					this.Changed_IsCorrect_numberOfIterations_peopleNum_questionNum_SkillNumPerQuestionArray_SkillsNeededArra0_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'questionNum'</summary>
		public int questionNum
		{
			get {
				return this.QuestionNum;
			}
			set {
				if (this.QuestionNum!=value) {
					this.QuestionNum = value;
					this.numberOfIterationsDone = 0;
					this.Changed_IsCorrect_peopleNum_questionNum_isDone = false;
					this.Changed_questionNum_isDone = false;
					this.Changed_peopleNum_questionNum_isDone = false;
					this.Changed_peopleNum_questionNum_SkillNumPerQuestionArray_isDone = false;
					this.Changed_numberOfIterationsDecreased_peopleNum_questionNum_SkillNumPerQuestionArray_Init_IsCorrect_Sk4_isDone = false;
					this.Changed_IsCorrect_numberOfIterations_peopleNum_questionNum_SkillNumPerQuestionArray_SkillsNeededArra0_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'SkillNumPerQuestionArray'</summary>
		public int[] SkillNumPerQuestionArray
		{
			get {
				return this.skillNumPerQuestionArray;
			}
			set {
				if ((value!=null)&&(value.Length!=this.QuestionNum)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.QuestionNum)+" was expected for variable \'SkillNumPerQuestionArray\'");
				}
				this.skillNumPerQuestionArray = value;
				this.numberOfIterationsDone = 0;
				this.Changed_SkillNumPerQuestionArray_isDone = false;
				this.Changed_peopleNum_questionNum_SkillNumPerQuestionArray_isDone = false;
				this.Changed_numberOfIterationsDecreased_peopleNum_questionNum_SkillNumPerQuestionArray_Init_IsCorrect_Sk4_isDone = false;
				this.Changed_IsCorrect_numberOfIterations_peopleNum_questionNum_SkillNumPerQuestionArray_SkillsNeededArra0_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'SkillsNeededArray'</summary>
		public int[][] SkillsNeededArray
		{
			get {
				return this.skillsNeededArray;
			}
			set {
				if ((value!=null)&&(value.Length!=this.QuestionNum)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.QuestionNum)+" was expected for variable \'SkillsNeededArray\'");
				}
				this.skillsNeededArray = value;
				this.numberOfIterationsDone = 0;
				this.Changed_SkillsNeededArray_isDone = false;
				this.Changed_numberOfIterationsDecreased_peopleNum_questionNum_SkillNumPerQuestionArray_Init_IsCorrect_Sk4_isInitialised = false;
				this.Changed_IsCorrect_numberOfIterations_peopleNum_questionNum_SkillNumPerQuestionArray_SkillsNeededArra0_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'skillsNum'</summary>
		public int skillsNum
		{
			get {
				return this.SkillsNum;
			}
			set {
				if (this.SkillsNum!=value) {
					this.SkillsNum = value;
					this.numberOfIterationsDone = 0;
					this.Changed_skillsNum_isDone = false;
					this.Changed_numberOfIterationsDecreased_peopleNum_questionNum_SkillNumPerQuestionArray_Init_IsCorrect_Sk4_isInitialised = false;
					this.Changed_IsCorrect_numberOfIterations_peopleNum_questionNum_SkillNumPerQuestionArray_SkillsNeededArra0_isDone = false;
				}
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of IsCorrect and numberOfIterations and peopleNum and questionNum and SkillNumPerQuestionArray and SkillsNeededArray and skillsNum</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_IsCorrect_numberOfIterations_peopleNum_questionNum_SkillNumPerQuestionArray_SkillsNeededArra0(int numberOfIterations)
		{
			if (this.Changed_IsCorrect_numberOfIterations_peopleNum_questionNum_SkillNumPerQuestionArray_SkillsNeededArra0_isDone) {
				return ;
			}
			DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> skills_F;
			Bernoulli skills_F_reduced;
			skills_F_reduced = default(Bernoulli);
			// Create array for 'skills' Forwards messages.
			skills_F = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.PeopleNum);
			if (this.PeopleNum>0) {
				if (this.SkillsNum>0) {
					skills_F_reduced = Bernoulli.Uniform();
				}
			}
			for(int index1 = 0; index1<this.PeopleNum; index1++) {
				// Create array for 'skills' Forwards messages.
				skills_F[index1] = new DistributionStructArray<Bernoulli,bool>(this.SkillsNum);
				for(int index0 = 0; index0<this.SkillsNum; index0++) {
					skills_F[index1][index0] = skills_F_reduced;
				}
			}
			// Create array for 'skills_marginal' Forwards messages.
			this.skills_marginal_F = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.PeopleNum);
			DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> skills_use_B;
			// Create array for 'skills_use' Backwards messages.
			skills_use_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.PeopleNum);
			// Create array for replicates of 'skills_use_F_index1__marginal'
			DistributionStructArray<Bernoulli,bool>[] skills_use_F_index1__marginal = new DistributionStructArray<Bernoulli,bool>[this.PeopleNum];
			for(int index1 = 0; index1<this.PeopleNum; index1++) {
				skills_use_F_index1__marginal[index1] = JaggedSubarrayOp<bool>.MarginalInit<DistributionStructArray<Bernoulli,bool>>(skills_F[index1]);
			}
			if (this.PeopleNum>0) {
				if (this.SkillsNum>0) {
					// Message to 'skills' from Bernoulli factor
					skills_F_reduced = BernoulliFromBetaOp.SampleAverageConditional(0.5);
				}
			}
			for(int index1 = 0; index1<this.PeopleNum; index1++) {
				for(int index0 = 0; index0<this.SkillsNum; index0++) {
					skills_F[index1][index0] = skills_F_reduced;
				}
			}
			// Create array for replicates of 'skills_SkillsNeededArray_F'
			DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>[] skills_SkillsNeededArray_F = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>[this.PeopleNum];
			for(int index1 = 0; index1<this.PeopleNum; index1++) {
				// Create array for 'skills_SkillsNeededArray' Forwards messages.
				skills_SkillsNeededArray_F[index1] = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.QuestionNum);
				for(int index2 = 0; index2<this.QuestionNum; index2++) {
					// Create array for 'skills_SkillsNeededArray' Forwards messages.
					skills_SkillsNeededArray_F[index1][index2] = new DistributionStructArray<Bernoulli,bool>(this.skillNumPerQuestionArray[index2]);
					for(int questionsSkills = 0; questionsSkills<this.skillNumPerQuestionArray[index2]; questionsSkills++) {
						skills_SkillsNeededArray_F[index1][index2][questionsSkills] = Bernoulli.Uniform();
					}
				}
			}
			// Create array for replicates of 'hasSkills_selector_B'
			Bernoulli[][] hasSkills_selector_B = new Bernoulli[this.PeopleNum][];
			// Create array for replicates of 'hasSkills_selector_cases_B'
			DistributionStructArray<Bernoulli,bool>[][] hasSkills_selector_cases_B = new DistributionStructArray<Bernoulli,bool>[this.PeopleNum][];
			// Create array for replicates of 'hasSkills_selector_cases_0_B'
			Bernoulli[][] hasSkills_selector_cases_0_B = new Bernoulli[this.PeopleNum][];
			// Create array for replicates of 'hasSkills_selector_cases_1_B'
			Bernoulli[][] hasSkills_selector_cases_1_B = new Bernoulli[this.PeopleNum][];
			Bernoulli vBernoulli1 = Bernoulli.FromLogOdds(-1.3862943611198906);
			Bernoulli vBernoulli0 = Bernoulli.FromLogOdds(2.1972245773362196);
			for(int index1 = 0; index1<this.PeopleNum; index1++) {
				// Create array for replicates of 'hasSkills_selector_cases_B'
				hasSkills_selector_cases_B[index1] = new DistributionStructArray<Bernoulli,bool>[this.QuestionNum];
				// Create array for replicates of 'hasSkills_selector_cases_1_B'
				hasSkills_selector_cases_1_B[index1] = new Bernoulli[this.QuestionNum];
				// Create array for replicates of 'hasSkills_selector_B'
				hasSkills_selector_B[index1] = new Bernoulli[this.QuestionNum];
				// Create array for replicates of 'hasSkills_selector_cases_0_B'
				hasSkills_selector_cases_0_B[index1] = new Bernoulli[this.QuestionNum];
				for(int index2 = 0; index2<this.QuestionNum; index2++) {
					// Create array for 'hasSkills_selector_cases' Backwards messages.
					hasSkills_selector_cases_B[index1][index2] = new DistributionStructArray<Bernoulli,bool>(2);
					for(int _ind0 = 0; _ind0<2; _ind0++) {
						hasSkills_selector_cases_B[index1][index2][_ind0] = Bernoulli.Uniform();
					}
					hasSkills_selector_cases_0_B[index1][index2] = Bernoulli.Uniform();
					// Message to 'hasSkills_selector_cases_0' from Random factor
					hasSkills_selector_cases_0_B[index1][index2] = Bernoulli.FromLogOdds(UnaryOp<bool>.LogEvidenceRatio<Bernoulli>(this.isCorrect[index1][index2], vBernoulli0));
					// Message to 'hasSkills_selector_cases' from Copy factor
					hasSkills_selector_cases_B[index1][index2][0] = ArrayHelper.SetTo<Bernoulli>(hasSkills_selector_cases_B[index1][index2][0], hasSkills_selector_cases_0_B[index1][index2]);
					hasSkills_selector_cases_1_B[index1][index2] = Bernoulli.Uniform();
					// Message to 'hasSkills_selector_cases_1' from Random factor
					hasSkills_selector_cases_1_B[index1][index2] = Bernoulli.FromLogOdds(UnaryOp<bool>.LogEvidenceRatio<Bernoulli>(this.isCorrect[index1][index2], vBernoulli1));
					// Message to 'hasSkills_selector_cases' from Copy factor
					hasSkills_selector_cases_B[index1][index2][1] = ArrayHelper.SetTo<Bernoulli>(hasSkills_selector_cases_B[index1][index2][1], hasSkills_selector_cases_1_B[index1][index2]);
					hasSkills_selector_B[index1][index2] = Bernoulli.Uniform();
					// Message to 'hasSkills_selector' from Cases factor
					hasSkills_selector_B[index1][index2] = CasesOp.BAverageConditional(hasSkills_selector_cases_B[index1][index2]);
				}
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				for(int index1 = 0; index1<this.PeopleNum; index1++) {
					skills_use_F_index1__marginal[index1] = JaggedSubarrayOp<bool>.Marginal<DistributionStructArray<Bernoulli,bool>,Bernoulli>(skills_F[index1], this.relevantSkills_B[index1], this.skillsNeededArray, skills_use_F_index1__marginal[index1]);
					for(int index2 = 0; index2<this.QuestionNum; index2++) {
						// Message to 'skills_SkillsNeededArray' from JaggedSubarray factor
						skills_SkillsNeededArray_F[index1][index2] = JaggedSubarrayOp<bool>.ItemsAverageConditional<DistributionStructArray<Bernoulli,bool>,Bernoulli,DistributionStructArray<Bernoulli,bool>>(this.relevantSkills_B[index1][index2], skills_F[index1], skills_use_F_index1__marginal[index1], this.skillsNeededArray, index2, skills_SkillsNeededArray_F[index1][index2]);
						// Message to 'relevantSkills' from AllTrue factor
						this.relevantSkills_B[index1][index2] = AllTrueOp.ArrayAverageConditional<DistributionStructArray<Bernoulli,bool>>(hasSkills_selector_B[index1][index2], skills_SkillsNeededArray_F[index1][index2], this.relevantSkills_B[index1][index2]);
					}
				}
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			for(int index1 = 0; index1<this.PeopleNum; index1++) {
				// Create array for 'skills_marginal' Forwards messages.
				this.skills_marginal_F[index1] = new DistributionStructArray<Bernoulli,bool>(this.SkillsNum);
				// Create array for 'skills_use' Backwards messages.
				skills_use_B[index1] = new DistributionStructArray<Bernoulli,bool>(this.SkillsNum);
				for(int index0 = 0; index0<this.SkillsNum; index0++) {
					skills_use_B[index1][index0] = Bernoulli.Uniform();
				}
				// Message to 'skills_use' from JaggedSubarray factor
				skills_use_B[index1] = JaggedSubarrayOp<bool>.ArrayAverageConditional<Bernoulli,DistributionStructArray<Bernoulli,bool>>(this.relevantSkills_B[index1], this.skillsNeededArray, skills_use_B[index1]);
				for(int index0 = 0; index0<this.SkillsNum; index0++) {
					this.skills_marginal_F[index1][index0] = Bernoulli.Uniform();
					// Message to 'skills_marginal' from Variable factor
					this.skills_marginal_F[index1][index0] = VariableOp.MarginalAverageConditional<Bernoulli>(skills_use_B[index1][index0], skills_F_reduced, this.skills_marginal_F[index1][index0]);
				}
			}
			this.Changed_IsCorrect_numberOfIterations_peopleNum_questionNum_SkillNumPerQuestionArray_SkillsNeededArra0_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of IsCorrect and peopleNum and questionNum</summary>
		private void Changed_IsCorrect_peopleNum_questionNum()
		{
			if (this.Changed_IsCorrect_peopleNum_questionNum_isDone) {
				return ;
			}
			// Create array for 'IsCorrect_marginal' Forwards messages.
			this.IsCorrect_marginal_F = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.PeopleNum);
			for(int index1 = 0; index1<this.PeopleNum; index1++) {
				// Create array for 'IsCorrect_marginal' Forwards messages.
				this.IsCorrect_marginal_F[index1] = new DistributionStructArray<Bernoulli,bool>(this.QuestionNum);
				for(int index2 = 0; index2<this.QuestionNum; index2++) {
					this.IsCorrect_marginal_F[index1][index2] = Bernoulli.Uniform();
				}
			}
			// Message to 'IsCorrect_marginal' from DerivedVariable factor
			this.IsCorrect_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>(this.isCorrect, this.IsCorrect_marginal_F);
			this.Changed_IsCorrect_peopleNum_questionNum_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and peopleNum and questionNum and SkillNumPerQuestionArray and must reset on changes to IsCorrect and SkillsNeededArray and skillsNum</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_peopleNum_questionNum_SkillNumPerQuestionArray_Init_IsCorrect_Sk4(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_peopleNum_questionNum_SkillNumPerQuestionArray_Init_IsCorrect_Sk4_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_peopleNum_questionNum_SkillNumPerQuestionArray_Init_IsCorrect_Sk4_isInitialised)) {
				return ;
			}
			for(int index1 = 0; index1<this.PeopleNum; index1++) {
				for(int index2 = 0; index2<this.QuestionNum; index2++) {
					for(int questionsSkills = 0; questionsSkills<this.skillNumPerQuestionArray[index2]; questionsSkills++) {
						this.relevantSkills_B[index1][index2][questionsSkills] = Bernoulli.Uniform();
					}
				}
			}
			this.Changed_numberOfIterationsDecreased_peopleNum_questionNum_SkillNumPerQuestionArray_Init_IsCorrect_Sk4_isDone = true;
			this.Changed_numberOfIterationsDecreased_peopleNum_questionNum_SkillNumPerQuestionArray_Init_IsCorrect_Sk4_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of peopleNum</summary>
		private void Changed_peopleNum()
		{
			if (this.Changed_peopleNum_isDone) {
				return ;
			}
			// Create array for replicates of 'relevantSkills_B'
			this.relevantSkills_B = new DistributionStructArray<Bernoulli,bool>[this.PeopleNum][];
			this.peopleNum_marginal_F = new PointMass<int>(this.PeopleNum);
			// Message to 'peopleNum_marginal' from DerivedVariable factor
			this.peopleNum_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int>,int>(this.PeopleNum, this.peopleNum_marginal_F);
			this.Changed_peopleNum_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of peopleNum and questionNum</summary>
		private void Changed_peopleNum_questionNum()
		{
			if (this.Changed_peopleNum_questionNum_isDone) {
				return ;
			}
			for(int index1 = 0; index1<this.PeopleNum; index1++) {
				// Create array for replicates of 'relevantSkills_B'
				this.relevantSkills_B[index1] = new DistributionStructArray<Bernoulli,bool>[this.QuestionNum];
			}
			this.Changed_peopleNum_questionNum_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of peopleNum and questionNum and SkillNumPerQuestionArray</summary>
		private void Changed_peopleNum_questionNum_SkillNumPerQuestionArray()
		{
			if (this.Changed_peopleNum_questionNum_SkillNumPerQuestionArray_isDone) {
				return ;
			}
			for(int index1 = 0; index1<this.PeopleNum; index1++) {
				for(int index2 = 0; index2<this.QuestionNum; index2++) {
					// Create array for 'relevantSkills' Backwards messages.
					this.relevantSkills_B[index1][index2] = new DistributionStructArray<Bernoulli,bool>(this.skillNumPerQuestionArray[index2]);
				}
			}
			this.Changed_peopleNum_questionNum_SkillNumPerQuestionArray_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of questionNum</summary>
		private void Changed_questionNum()
		{
			if (this.Changed_questionNum_isDone) {
				return ;
			}
			this.questionNum_marginal_F = new PointMass<int>(this.QuestionNum);
			// Message to 'questionNum_marginal' from DerivedVariable factor
			this.questionNum_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int>,int>(this.QuestionNum, this.questionNum_marginal_F);
			this.Changed_questionNum_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of SkillNumPerQuestionArray</summary>
		private void Changed_SkillNumPerQuestionArray()
		{
			if (this.Changed_SkillNumPerQuestionArray_isDone) {
				return ;
			}
			// Create array for 'SkillNumPerQuestionArray_marginal' Forwards messages.
			this.SkillNumPerQuestionArray_marginal_F = new PointMass<int[]>(this.skillNumPerQuestionArray);
			// Message to 'SkillNumPerQuestionArray_marginal' from DerivedVariable factor
			this.SkillNumPerQuestionArray_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[]>,int[]>(this.skillNumPerQuestionArray, this.SkillNumPerQuestionArray_marginal_F);
			this.Changed_SkillNumPerQuestionArray_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of SkillsNeededArray</summary>
		private void Changed_SkillsNeededArray()
		{
			if (this.Changed_SkillsNeededArray_isDone) {
				return ;
			}
			// Create array for 'SkillsNeededArray_marginal' Forwards messages.
			this.SkillsNeededArray_marginal_F = new PointMass<int[][]>(this.skillsNeededArray);
			// Message to 'SkillsNeededArray_marginal' from DerivedVariable factor
			this.SkillsNeededArray_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[][]>,int[][]>(this.skillsNeededArray, this.SkillsNeededArray_marginal_F);
			this.Changed_SkillsNeededArray_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of skillsNum</summary>
		private void Changed_skillsNum()
		{
			if (this.Changed_skillsNum_isDone) {
				return ;
			}
			this.skillsNum_marginal_F = new PointMass<int>(this.SkillsNum);
			// Message to 'skillsNum_marginal' from DerivedVariable factor
			this.skillsNum_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int>,int>(this.SkillsNum, this.skillsNum_marginal_F);
			this.Changed_skillsNum_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_peopleNum_questionNum_SkillNumPerQuestionArray_Init_IsCorrect_Sk4_isDone = false;
				}
				this.Changed_IsCorrect_numberOfIterations_peopleNum_questionNum_SkillNumPerQuestionArray_SkillsNeededArra0_isDone = false;
			}
			this.Changed_IsCorrect_peopleNum_questionNum();
			this.Changed_SkillsNeededArray();
			this.Changed_SkillNumPerQuestionArray();
			this.Changed_questionNum();
			this.Changed_skillsNum();
			this.Changed_peopleNum();
			this.Changed_peopleNum_questionNum();
			this.Changed_peopleNum_questionNum_SkillNumPerQuestionArray();
			this.Changed_numberOfIterationsDecreased_peopleNum_questionNum_SkillNumPerQuestionArray_Init_IsCorrect_Sk4(initialise);
			this.Changed_IsCorrect_numberOfIterations_peopleNum_questionNum_SkillNumPerQuestionArray_SkillsNeededArra0(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="skillsNum") {
				return this.skillsNum;
			}
			if (variableName=="questionNum") {
				return this.questionNum;
			}
			if (variableName=="peopleNum") {
				return this.peopleNum;
			}
			if (variableName=="SkillNumPerQuestionArray") {
				return this.SkillNumPerQuestionArray;
			}
			if (variableName=="SkillsNeededArray") {
				return this.SkillsNeededArray;
			}
			if (variableName=="IsCorrect") {
				return this.IsCorrect;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'IsCorrect' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> IsCorrectMarginal()
		{
			return this.IsCorrect_marginal_F;
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="IsCorrect") {
				return this.IsCorrectMarginal();
			}
			if (variableName=="SkillsNeededArray") {
				return this.SkillsNeededArrayMarginal();
			}
			if (variableName=="SkillNumPerQuestionArray") {
				return this.SkillNumPerQuestionArrayMarginal();
			}
			if (variableName=="questionNum") {
				return this.QuestionNumMarginal();
			}
			if (variableName=="skillsNum") {
				return this.SkillsNumMarginal();
			}
			if (variableName=="peopleNum") {
				return this.PeopleNumMarginal();
			}
			if (variableName=="skills") {
				return this.SkillsMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>
		/// Returns the marginal distribution for 'peopleNum' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int> PeopleNumMarginal()
		{
			return this.peopleNum_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'questionNum' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int> QuestionNumMarginal()
		{
			return this.questionNum_marginal_F;
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="skillsNum") {
				this.skillsNum = (int)value;
				return ;
			}
			if (variableName=="questionNum") {
				this.questionNum = (int)value;
				return ;
			}
			if (variableName=="peopleNum") {
				this.peopleNum = (int)value;
				return ;
			}
			if (variableName=="SkillNumPerQuestionArray") {
				this.SkillNumPerQuestionArray = (int[])value;
				return ;
			}
			if (variableName=="SkillsNeededArray") {
				this.SkillsNeededArray = (int[][])value;
				return ;
			}
			if (variableName=="IsCorrect") {
				this.IsCorrect = (bool[][])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'SkillNumPerQuestionArray' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[]> SkillNumPerQuestionArrayMarginal()
		{
			return this.SkillNumPerQuestionArray_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'skills' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> SkillsMarginal()
		{
			return this.skills_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'SkillsNeededArray' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[][]> SkillsNeededArrayMarginal()
		{
			return this.SkillsNeededArray_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'skillsNum' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int> SkillsNumMarginal()
		{
			return this.skillsNum_marginal_F;
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
