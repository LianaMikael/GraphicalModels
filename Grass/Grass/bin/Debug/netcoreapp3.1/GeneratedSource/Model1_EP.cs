// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Collections;
using Microsoft.ML.Probabilistic.Factors;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.4.2203.202 at 9:31 PM on Saturday, June 11, 2022.
	/// </remarks>
	public partial class Model1_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Changed_numberOfIterations_wetGrassEqTrue has executed. Set this to false to force re-execution of Changed_numberOfIterations_wetGrassEqTrue</summary>
		public bool Changed_numberOfIterations_wetGrassEqTrue_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_wetGrassEqTrue has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_wetGrassEqTrue</summary>
		public bool Changed_numberOfIterationsDecreased_Init_wetGrassEqTrue_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_wetGrassEqTrue has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_wetGrassEqTrue</summary>
		public bool Changed_numberOfIterationsDecreased_Init_wetGrassEqTrue_isInitialised;
		/// <summary>True if Changed_wetGrassEqTrue has executed. Set this to false to force re-execution of Changed_wetGrassEqTrue</summary>
		public bool Changed_wetGrassEqTrue_isDone;
		/// <summary>Message to marginal of 'cloudyEqTrue'</summary>
		public Bernoulli cloudyEqTrue_marginal_F;
		/// <summary>Messages from uses of 'cloudyEqTrue_selector_cases'</summary>
		public DistributionStructArray<Bernoulli,bool>[] cloudyEqTrue_selector_cases_uses_B;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Message to marginal of 'rainEqTrue'</summary>
		public Bernoulli rainEqTrue_marginal_F;
		/// <summary>Message to marginal of 'sprinklerEqTrue'</summary>
		public Bernoulli sprinklerEqTrue_marginal_F;
		/// <summary>Field backing the wetGrassEqTrue property</summary>
		private bool WetGrassEqTrue;
		/// <summary>Message to marginal of 'wetGrassEqTrue'</summary>
		public Bernoulli wetGrassEqTrue_marginal_F;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'wetGrassEqTrue'</summary>
		public bool wetGrassEqTrue
		{
			get {
				return this.WetGrassEqTrue;
			}
			set {
				if (this.WetGrassEqTrue!=value) {
					this.WetGrassEqTrue = value;
					this.numberOfIterationsDone = 0;
					this.Changed_wetGrassEqTrue_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_wetGrassEqTrue_isInitialised = false;
					this.Changed_numberOfIterations_wetGrassEqTrue_isDone = false;
				}
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of numberOfIterations and wetGrassEqTrue</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_numberOfIterations_wetGrassEqTrue(int numberOfIterations)
		{
			if (this.Changed_numberOfIterations_wetGrassEqTrue_isDone) {
				return ;
			}
			Bernoulli vBernoulli0 = Bernoulli.Uniform();
			this.cloudyEqTrue_marginal_F = Bernoulli.Uniform();
			// Create array for 'cloudyEqTrue_selector_cases_uses' Backwards messages.
			this.cloudyEqTrue_selector_cases_uses_B[0] = new DistributionStructArray<Bernoulli,bool>(2);
			for(int _iv = 0; _iv<2; _iv++) {
				this.cloudyEqTrue_selector_cases_uses_B[0][_iv] = Bernoulli.Uniform();
			}
			Bernoulli[] sprinklerEqTrue__F;
			// Create array for 'sprinklerEqTrue_' Forwards messages.
			sprinklerEqTrue__F = new Bernoulli[2];
			for(int _gateind = 0; _gateind<2; _gateind++) {
				sprinklerEqTrue__F[_gateind] = Bernoulli.Uniform();
			}
			Bernoulli vBernoulli1 = Bernoulli.FromLogOdds(-2.1972245773362191);
			// Message to 'sprinklerEqTrue_' from Copy factor
			sprinklerEqTrue__F[0] = ArrayHelper.SetTo<Bernoulli>(sprinklerEqTrue__F[0], vBernoulli1);
			Bernoulli[] sprinklerEqTrue_selector_uses_B;
			// Create array for 'sprinklerEqTrue_selector_uses' Backwards messages.
			sprinklerEqTrue_selector_uses_B = new Bernoulli[2];
			sprinklerEqTrue_selector_uses_B[1] = Bernoulli.Uniform();
			DistributionStructArray<Bernoulli,bool> sprinklerEqTrue_selector_cases_B;
			// Create array for 'sprinklerEqTrue_selector_cases' Backwards messages.
			sprinklerEqTrue_selector_cases_B = new DistributionStructArray<Bernoulli,bool>(2);
			for(int _ind0 = 0; _ind0<2; _ind0++) {
				sprinklerEqTrue_selector_cases_B[_ind0] = Bernoulli.Uniform();
			}
			Bernoulli[] sprinklerEqTrue_selector_cases_0_uses_B;
			// Create array for 'sprinklerEqTrue_selector_cases_0_uses' Backwards messages.
			sprinklerEqTrue_selector_cases_0_uses_B = new Bernoulli[5];
			sprinklerEqTrue_selector_cases_0_uses_B[3] = Bernoulli.Uniform();
			sprinklerEqTrue_selector_cases_0_uses_B[2] = Bernoulli.Uniform();
			sprinklerEqTrue_selector_cases_0_uses_B[1] = Bernoulli.Uniform();
			sprinklerEqTrue_selector_cases_0_uses_B[0] = Bernoulli.Uniform();
			DistributionStructArray<Bernoulli,bool> cloudyEqTrue_selector_cases_F;
			// Create array for 'cloudyEqTrue_selector_cases' Forwards messages.
			cloudyEqTrue_selector_cases_F = new DistributionStructArray<Bernoulli,bool>(2);
			for(int _iv = 0; _iv<2; _iv++) {
				cloudyEqTrue_selector_cases_F[_iv] = Bernoulli.Uniform();
			}
			// Message to 'cloudyEqTrue_selector_cases' from Cases factor
			cloudyEqTrue_selector_cases_F = CasesOp.CasesAverageConditional<DistributionStructArray<Bernoulli,bool>>(vBernoulli0, cloudyEqTrue_selector_cases_F);
			DistributionStructArray<Bernoulli,bool>[] cloudyEqTrue_selector_cases_uses_F;
			// Create array for 'cloudyEqTrue_selector_cases_uses' Forwards messages.
			cloudyEqTrue_selector_cases_uses_F = new DistributionStructArray<Bernoulli,bool>[3];
			// Create array for 'cloudyEqTrue_selector_cases_uses' Forwards messages.
			cloudyEqTrue_selector_cases_uses_F[2] = new DistributionStructArray<Bernoulli,bool>(2);
			for(int _iv = 0; _iv<2; _iv++) {
				cloudyEqTrue_selector_cases_uses_F[2][_iv] = Bernoulli.Uniform();
			}
			Bernoulli[] rainEqTrue__F;
			// Create array for 'rainEqTrue_' Forwards messages.
			rainEqTrue__F = new Bernoulli[2];
			for(int _gateind2 = 0; _gateind2<2; _gateind2++) {
				rainEqTrue__F[_gateind2] = Bernoulli.Uniform();
			}
			Bernoulli vBernoulli3 = Bernoulli.FromLogOdds(1.3862943611198908);
			// Message to 'rainEqTrue_' from Copy factor
			rainEqTrue__F[0] = ArrayHelper.SetTo<Bernoulli>(rainEqTrue__F[0], vBernoulli3);
			Bernoulli vBernoulli4 = Bernoulli.FromLogOdds(-1.3862943611198906);
			// Message to 'rainEqTrue_' from Copy factor
			rainEqTrue__F[1] = ArrayHelper.SetTo<Bernoulli>(rainEqTrue__F[1], vBernoulli4);
			Bernoulli rainEqTrue_F = Bernoulli.Uniform();
			DistributionStructArray<Bernoulli,bool> rainEqTrue_2_0__selector_cases_B;
			// Create array for 'rainEqTrue_2_0__selector_cases' Backwards messages.
			rainEqTrue_2_0__selector_cases_B = new DistributionStructArray<Bernoulli,bool>(2);
			for(int _ind0 = 0; _ind0<2; _ind0++) {
				rainEqTrue_2_0__selector_cases_B[_ind0] = Bernoulli.Uniform();
			}
			Bernoulli vBernoulli5 = Bernoulli.FromLogOdds(4.5951198501345889);
			Bernoulli rainEqTrue_2_0__selector_cases_0_B = default(Bernoulli);
			// Message to 'rainEqTrue_2_0__selector_cases_0' from Random factor
			rainEqTrue_2_0__selector_cases_0_B = Bernoulli.FromLogOdds(UnaryOp<bool>.LogEvidenceRatio<Bernoulli>(this.WetGrassEqTrue, vBernoulli5));
			// Message to 'rainEqTrue_2_0__selector_cases' from Copy factor
			rainEqTrue_2_0__selector_cases_B[0] = ArrayHelper.SetTo<Bernoulli>(rainEqTrue_2_0__selector_cases_B[0], rainEqTrue_2_0__selector_cases_0_B);
			Bernoulli vBernoulli6 = Bernoulli.FromLogOdds(2.1972245773362196);
			Bernoulli rainEqTrue_2_0__selector_cases_1_B = default(Bernoulli);
			// Message to 'rainEqTrue_2_0__selector_cases_1' from Random factor
			rainEqTrue_2_0__selector_cases_1_B = Bernoulli.FromLogOdds(UnaryOp<bool>.LogEvidenceRatio<Bernoulli>(this.WetGrassEqTrue, vBernoulli6));
			// Message to 'rainEqTrue_2_0__selector_cases' from Copy factor
			rainEqTrue_2_0__selector_cases_B[1] = ArrayHelper.SetTo<Bernoulli>(rainEqTrue_2_0__selector_cases_B[1], rainEqTrue_2_0__selector_cases_1_B);
			sprinklerEqTrue_selector_cases_0_uses_B[4] = Bernoulli.Uniform();
			Bernoulli sprinklerEqTrue_selector_cases_0_B = Bernoulli.Uniform();
			Bernoulli[] sprinklerEqTrue_selector_cases_1_uses_B;
			// Create array for 'sprinklerEqTrue_selector_cases_1_uses' Backwards messages.
			sprinklerEqTrue_selector_cases_1_uses_B = new Bernoulli[5];
			sprinklerEqTrue_selector_cases_1_uses_B[3] = Bernoulli.Uniform();
			sprinklerEqTrue_selector_cases_1_uses_B[2] = Bernoulli.Uniform();
			sprinklerEqTrue_selector_cases_1_uses_B[1] = Bernoulli.Uniform();
			sprinklerEqTrue_selector_cases_1_uses_B[0] = Bernoulli.Uniform();
			DistributionStructArray<Bernoulli,bool> rainEqTrue_2_1__selector_cases_B;
			// Create array for 'rainEqTrue_2_1__selector_cases' Backwards messages.
			rainEqTrue_2_1__selector_cases_B = new DistributionStructArray<Bernoulli,bool>(2);
			for(int _ind0 = 0; _ind0<2; _ind0++) {
				rainEqTrue_2_1__selector_cases_B[_ind0] = Bernoulli.Uniform();
			}
			Bernoulli rainEqTrue_2_1__selector_cases_0_B = default(Bernoulli);
			// Message to 'rainEqTrue_2_1__selector_cases_0' from Random factor
			rainEqTrue_2_1__selector_cases_0_B = Bernoulli.FromLogOdds(UnaryOp<bool>.LogEvidenceRatio<Bernoulli>(this.WetGrassEqTrue, vBernoulli6));
			// Message to 'rainEqTrue_2_1__selector_cases' from Copy factor
			rainEqTrue_2_1__selector_cases_B[0] = ArrayHelper.SetTo<Bernoulli>(rainEqTrue_2_1__selector_cases_B[0], rainEqTrue_2_1__selector_cases_0_B);
			Bernoulli vBernoulli8 = Bernoulli.FromLogOdds(double.NegativeInfinity);
			Bernoulli rainEqTrue_2_1__selector_cases_1_B = default(Bernoulli);
			// Message to 'rainEqTrue_2_1__selector_cases_1' from Random factor
			rainEqTrue_2_1__selector_cases_1_B = Bernoulli.FromLogOdds(UnaryOp<bool>.LogEvidenceRatio<Bernoulli>(this.WetGrassEqTrue, vBernoulli8));
			// Message to 'rainEqTrue_2_1__selector_cases' from Copy factor
			rainEqTrue_2_1__selector_cases_B[1] = ArrayHelper.SetTo<Bernoulli>(rainEqTrue_2_1__selector_cases_B[1], rainEqTrue_2_1__selector_cases_1_B);
			sprinklerEqTrue_selector_cases_1_uses_B[4] = Bernoulli.Uniform();
			Bernoulli sprinklerEqTrue_selector_cases_1_B = Bernoulli.Uniform();
			sprinklerEqTrue_selector_uses_B[0] = Bernoulli.Uniform();
			Bernoulli sprinklerEqTrue_selector_B = Bernoulli.Uniform();
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				// Message to 'cloudyEqTrue_selector_cases_uses' from Replicate factor
				cloudyEqTrue_selector_cases_uses_F[2] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Bernoulli,bool>>(this.cloudyEqTrue_selector_cases_uses_B, cloudyEqTrue_selector_cases_F, 2, cloudyEqTrue_selector_cases_uses_F[2]);
				// Message to 'rainEqTrue' from Exit factor
				rainEqTrue_F = BeliefPropagationGateExitOp.ExitAverageConditional<Bernoulli>(cloudyEqTrue_selector_cases_uses_F[2], rainEqTrue__F, rainEqTrue_F);
				// Message to 'sprinklerEqTrue_selector_cases_1_uses' from Cases factor
				sprinklerEqTrue_selector_cases_1_uses_B[4] = Bernoulli.FromLogOdds(CasesOp.LogEvidenceRatio(rainEqTrue_2_1__selector_cases_B, rainEqTrue_F));
				// Message to 'sprinklerEqTrue_selector_cases_1' from Replicate factor
				sprinklerEqTrue_selector_cases_1_B = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(sprinklerEqTrue_selector_cases_1_uses_B, sprinklerEqTrue_selector_cases_1_B);
				// Message to 'sprinklerEqTrue_selector_cases' from Copy factor
				sprinklerEqTrue_selector_cases_B[1] = ArrayHelper.SetTo<Bernoulli>(sprinklerEqTrue_selector_cases_B[1], sprinklerEqTrue_selector_cases_1_B);
				// Message to 'sprinklerEqTrue_selector_cases_0_uses' from Cases factor
				sprinklerEqTrue_selector_cases_0_uses_B[4] = Bernoulli.FromLogOdds(CasesOp.LogEvidenceRatio(rainEqTrue_2_0__selector_cases_B, rainEqTrue_F));
				// Message to 'sprinklerEqTrue_selector_cases_0' from Replicate factor
				sprinklerEqTrue_selector_cases_0_B = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(sprinklerEqTrue_selector_cases_0_uses_B, sprinklerEqTrue_selector_cases_0_B);
				// Message to 'sprinklerEqTrue_selector_cases' from Copy factor
				sprinklerEqTrue_selector_cases_B[0] = ArrayHelper.SetTo<Bernoulli>(sprinklerEqTrue_selector_cases_B[0], sprinklerEqTrue_selector_cases_0_B);
				// Message to 'sprinklerEqTrue_selector_uses' from Cases factor
				sprinklerEqTrue_selector_uses_B[0] = CasesOp.BAverageConditional(sprinklerEqTrue_selector_cases_B);
				// Message to 'sprinklerEqTrue_selector' from Replicate factor
				sprinklerEqTrue_selector_B = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(sprinklerEqTrue_selector_uses_B, sprinklerEqTrue_selector_B);
				for(int _iv = 0; _iv<2; _iv++) {
					// Message to 'cloudyEqTrue_selector_cases_uses' from Exit factor
					this.cloudyEqTrue_selector_cases_uses_B[1][_iv] = GateExitOp<bool>.CasesAverageConditional<Bernoulli>(sprinklerEqTrue_selector_B, sprinklerEqTrue__F[_iv], _iv);
				}
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			// Create array for 'cloudyEqTrue_selector_cases_uses' Forwards messages.
			cloudyEqTrue_selector_cases_uses_F[1] = new DistributionStructArray<Bernoulli,bool>(2);
			for(int _iv = 0; _iv<2; _iv++) {
				cloudyEqTrue_selector_cases_uses_F[1][_iv] = Bernoulli.Uniform();
			}
			Bernoulli sprinklerEqTrue_F = Bernoulli.Uniform();
			Bernoulli[] sprinklerEqTrue_selector_uses_F;
			// Create array for 'sprinklerEqTrue_selector_uses' Forwards messages.
			sprinklerEqTrue_selector_uses_F = new Bernoulli[2];
			sprinklerEqTrue_selector_uses_F[1] = Bernoulli.Uniform();
			Bernoulli[] rainEqTrue_2_B;
			// Create array for 'rainEqTrue_2' Backwards messages.
			rainEqTrue_2_B = new Bernoulli[2];
			for(int _gateind3 = 0; _gateind3<2; _gateind3++) {
				rainEqTrue_2_B[_gateind3] = Bernoulli.Uniform();
			}
			Bernoulli rainEqTrue_2_0__selector_B = default(Bernoulli);
			// Message to 'rainEqTrue_2_0__selector' from Cases factor
			rainEqTrue_2_0__selector_B = CasesOp.BAverageConditional(rainEqTrue_2_0__selector_cases_B);
			// Message to 'rainEqTrue_2' from Copy factor
			rainEqTrue_2_B[0] = ArrayHelper.SetTo<Bernoulli>(rainEqTrue_2_B[0], rainEqTrue_2_0__selector_B);
			Bernoulli rainEqTrue_2_1__selector_B = default(Bernoulli);
			// Message to 'rainEqTrue_2_1__selector' from Cases factor
			rainEqTrue_2_1__selector_B = CasesOp.BAverageConditional(rainEqTrue_2_1__selector_cases_B);
			// Message to 'rainEqTrue_2' from Copy factor
			rainEqTrue_2_B[1] = ArrayHelper.SetTo<Bernoulli>(rainEqTrue_2_B[1], rainEqTrue_2_1__selector_B);
			Bernoulli rainEqTrue_use_B = Bernoulli.Uniform();
			// Create array for 'cloudyEqTrue_selector_cases_uses' Backwards messages.
			this.cloudyEqTrue_selector_cases_uses_B[2] = new DistributionStructArray<Bernoulli,bool>(2);
			for(int _iv = 0; _iv<2; _iv++) {
				this.cloudyEqTrue_selector_cases_uses_B[2][_iv] = Bernoulli.Uniform();
			}
			for(int iteration = 0; iteration<numberOfIterations; iteration++) {
				// Message to 'sprinklerEqTrue' from Exit factor
				sprinklerEqTrue_F = BeliefPropagationGateExitOp.ExitAverageConditional<Bernoulli>(cloudyEqTrue_selector_cases_uses_F[1], sprinklerEqTrue__F, sprinklerEqTrue_F);
				// Message to 'sprinklerEqTrue_selector_uses' from Replicate factor
				sprinklerEqTrue_selector_uses_F[1] = ReplicateOp_NoDivide.UsesAverageConditional<Bernoulli>(sprinklerEqTrue_selector_uses_B, sprinklerEqTrue_F, 1, sprinklerEqTrue_selector_uses_F[1]);
				// Message to 'rainEqTrue_use' from EnterPartial factor
				rainEqTrue_use_B = BeliefPropagationGateEnterPartialOp.ValueAverageConditional<Bernoulli>(rainEqTrue_2_B, sprinklerEqTrue_selector_uses_F[1], rainEqTrue_F, new int[2] {0, 1}, rainEqTrue_use_B);
				for(int _iv = 0; _iv<2; _iv++) {
					// Message to 'cloudyEqTrue_selector_cases_uses' from Exit factor
					this.cloudyEqTrue_selector_cases_uses_B[2][_iv] = GateExitOp<bool>.CasesAverageConditional<Bernoulli>(rainEqTrue_use_B, rainEqTrue__F[_iv], _iv);
				}
				// Message to 'cloudyEqTrue_selector_cases_uses' from Replicate factor
				cloudyEqTrue_selector_cases_uses_F[1] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Bernoulli,bool>>(this.cloudyEqTrue_selector_cases_uses_B, cloudyEqTrue_selector_cases_F, 1, cloudyEqTrue_selector_cases_uses_F[1]);
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			DistributionStructArray<Bernoulli,bool> cloudyEqTrue_selector_cases_B;
			// Create array for 'cloudyEqTrue_selector_cases' Backwards messages.
			cloudyEqTrue_selector_cases_B = new DistributionStructArray<Bernoulli,bool>(2);
			for(int _iv = 0; _iv<2; _iv++) {
				cloudyEqTrue_selector_cases_B[_iv] = Bernoulli.Uniform();
			}
			// Message to 'cloudyEqTrue_selector_cases' from Replicate factor
			cloudyEqTrue_selector_cases_B = ReplicateOp_NoDivide.DefAverageConditional<DistributionStructArray<Bernoulli,bool>>(this.cloudyEqTrue_selector_cases_uses_B, cloudyEqTrue_selector_cases_B);
			Bernoulli cloudyEqTrue_selector_B = default(Bernoulli);
			// Message to 'cloudyEqTrue_selector' from Cases factor
			cloudyEqTrue_selector_B = CasesOp.BAverageConditional(cloudyEqTrue_selector_cases_B);
			// Message to 'cloudyEqTrue_marginal' from Variable factor
			this.cloudyEqTrue_marginal_F = VariableOp.MarginalAverageConditional<Bernoulli>(cloudyEqTrue_selector_B, vBernoulli0, this.cloudyEqTrue_marginal_F);
			this.sprinklerEqTrue_marginal_F = Bernoulli.Uniform();
			// Message to 'sprinklerEqTrue_marginal' from DerivedVariable factor
			this.sprinklerEqTrue_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(sprinklerEqTrue_selector_B, sprinklerEqTrue_F, this.sprinklerEqTrue_marginal_F);
			this.rainEqTrue_marginal_F = Bernoulli.Uniform();
			// Message to 'rainEqTrue_marginal' from DerivedVariable factor
			this.rainEqTrue_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(rainEqTrue_use_B, rainEqTrue_F, this.rainEqTrue_marginal_F);
			this.Changed_numberOfIterations_wetGrassEqTrue_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to wetGrassEqTrue</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_wetGrassEqTrue(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_wetGrassEqTrue_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_wetGrassEqTrue_isInitialised)) {
				return ;
			}
			for(int _iv = 0; _iv<2; _iv++) {
				this.cloudyEqTrue_selector_cases_uses_B[1][_iv] = Bernoulli.Uniform();
			}
			this.Changed_numberOfIterationsDecreased_Init_wetGrassEqTrue_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_wetGrassEqTrue_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of wetGrassEqTrue</summary>
		private void Changed_wetGrassEqTrue()
		{
			if (this.Changed_wetGrassEqTrue_isDone) {
				return ;
			}
			this.wetGrassEqTrue_marginal_F = Bernoulli.Uniform();
			// Message to 'wetGrassEqTrue_marginal' from DerivedVariable factor
			this.wetGrassEqTrue_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli,bool>(this.WetGrassEqTrue, this.wetGrassEqTrue_marginal_F);
			this.Changed_wetGrassEqTrue_isDone = true;
		}

		/// <summary>
		/// Returns the marginal distribution for 'cloudyEqTrue' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli CloudyEqTrueMarginal()
		{
			return this.cloudyEqTrue_marginal_F;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			// Create array for 'cloudyEqTrue_selector_cases_uses' Backwards messages.
			this.cloudyEqTrue_selector_cases_uses_B = new DistributionStructArray<Bernoulli,bool>[3];
			// Create array for 'cloudyEqTrue_selector_cases_uses' Backwards messages.
			this.cloudyEqTrue_selector_cases_uses_B[1] = new DistributionStructArray<Bernoulli,bool>(2);
			this.Constant_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_Init_wetGrassEqTrue_isDone = false;
				}
				this.Changed_numberOfIterations_wetGrassEqTrue_isDone = false;
			}
			this.Changed_wetGrassEqTrue();
			this.Constant();
			this.Changed_numberOfIterationsDecreased_Init_wetGrassEqTrue(initialise);
			this.Changed_numberOfIterations_wetGrassEqTrue(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="wetGrassEqTrue") {
				return this.wetGrassEqTrue;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="wetGrassEqTrue") {
				return this.WetGrassEqTrueMarginal();
			}
			if (variableName=="cloudyEqTrue") {
				return this.CloudyEqTrueMarginal();
			}
			if (variableName=="sprinklerEqTrue") {
				return this.SprinklerEqTrueMarginal();
			}
			if (variableName=="rainEqTrue") {
				return this.RainEqTrueMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>
		/// Returns the marginal distribution for 'rainEqTrue' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli RainEqTrueMarginal()
		{
			return this.rainEqTrue_marginal_F;
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="wetGrassEqTrue") {
				this.wetGrassEqTrue = (bool)value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'sprinklerEqTrue' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli SprinklerEqTrueMarginal()
		{
			return this.sprinklerEqTrue_marginal_F;
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'wetGrassEqTrue' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli WetGrassEqTrueMarginal()
		{
			return this.wetGrassEqTrue_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
