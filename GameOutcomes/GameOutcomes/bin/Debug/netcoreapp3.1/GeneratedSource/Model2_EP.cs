// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.4.2203.202 at 3:13 PM on Saturday, June 18, 2022.
	/// </remarks>
	public partial class Model2_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Changed_numberOfIterations_vbool3_vbool4 has executed. Set this to false to force re-execution of Changed_numberOfIterations_vbool3_vbool4</summary>
		public bool Changed_numberOfIterations_vbool3_vbool4_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_vbool3_vbool4 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_vbool3_vbool4</summary>
		public bool Changed_numberOfIterationsDecreased_Init_vbool3_vbool4_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_vbool3_vbool4 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_vbool3_vbool4</summary>
		public bool Changed_numberOfIterationsDecreased_Init_vbool3_vbool4_isInitialised;
		/// <summary>True if Changed_vbool3 has executed. Set this to false to force re-execution of Changed_vbool3</summary>
		public bool Changed_vbool3_isDone;
		/// <summary>True if Changed_vbool4 has executed. Set this to false to force re-execution of Changed_vbool4</summary>
		public bool Changed_vbool4_isDone;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Message to marginal of 'Player1Skill'</summary>
		public Gaussian Player1Skill_marginal_F;
		/// <summary>Message to marginal of 'Player2Skill'</summary>
		public Gaussian Player2Skill_marginal_F;
		/// <summary>Message to marginal of 'Player3Skill'</summary>
		public Gaussian Player3Skill_marginal_F;
		/// <summary>Field backing the vbool3 property</summary>
		private bool Vbool3;
		/// <summary>Message to marginal of 'vbool3'</summary>
		public Bernoulli vbool3_marginal_F;
		/// <summary>Field backing the vbool4 property</summary>
		private bool Vbool4;
		/// <summary>Message to marginal of 'vbool4'</summary>
		public Bernoulli vbool4_marginal_F;
		/// <summary>Message to marginal of 'vdouble39'</summary>
		public Gaussian vdouble39_marginal_F;
		/// <summary>Message to marginal of 'vdouble41'</summary>
		public Gaussian vdouble41_marginal_F;
		/// <summary>Messages from uses of 'vdouble41_use'</summary>
		public Gaussian[] vdouble41_uses_B;
		/// <summary>Message to marginal of 'vdouble43'</summary>
		public Gaussian vdouble43_marginal_F;
		/// <summary>Message to marginal of 'vdouble44'</summary>
		public Gaussian vdouble44_marginal_F;
		/// <summary>Message to marginal of 'vdouble45'</summary>
		public Gaussian vdouble45_marginal_F;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'vbool3'</summary>
		public bool vbool3
		{
			get {
				return this.Vbool3;
			}
			set {
				if (this.Vbool3!=value) {
					this.Vbool3 = value;
					this.numberOfIterationsDone = 0;
					this.Changed_vbool3_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_vbool3_vbool4_isInitialised = false;
					this.Changed_numberOfIterations_vbool3_vbool4_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'vbool4'</summary>
		public bool vbool4
		{
			get {
				return this.Vbool4;
			}
			set {
				if (this.Vbool4!=value) {
					this.Vbool4 = value;
					this.numberOfIterationsDone = 0;
					this.Changed_vbool4_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_vbool3_vbool4_isInitialised = false;
					this.Changed_numberOfIterations_vbool3_vbool4_isDone = false;
				}
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of numberOfIterations and vbool3 and vbool4</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_numberOfIterations_vbool3_vbool4(int numberOfIterations)
		{
			if (this.Changed_numberOfIterations_vbool3_vbool4_isDone) {
				return ;
			}
			Gaussian Player1Skill_F = default(Gaussian);
			this.Player1Skill_marginal_F = Gaussian.Uniform();
			Gaussian Player1Skill_use_B = default(Gaussian);
			// Message to 'Player1Skill' from GaussianFromMeanAndVariance factor
			Player1Skill_F = GaussianFromMeanAndVarianceOp.SampleAverageConditional(120.0, 1600.0);
			Gaussian Player2Skill_F = default(Gaussian);
			// Message to 'Player2Skill' from GaussianFromMeanAndVariance factor
			Player2Skill_F = GaussianFromMeanAndVarianceOp.SampleAverageConditional(100.0, 25.0);
			Gaussian vdouble41_F = default(Gaussian);
			// Message to 'vdouble41' from GaussianFromMeanAndVariance factor
			vdouble41_F = GaussianFromMeanAndVarianceOp.SampleAverageConditional(Player2Skill_F, 25.0);
			Gaussian Player3Skill_F = default(Gaussian);
			// Message to 'Player3Skill' from GaussianFromMeanAndVariance factor
			Player3Skill_F = GaussianFromMeanAndVarianceOp.SampleAverageConditional(140.0, 1600.0);
			Gaussian vdouble43_F = default(Gaussian);
			// Message to 'vdouble43' from GaussianFromMeanAndVariance factor
			vdouble43_F = GaussianFromMeanAndVarianceOp.SampleAverageConditional(Player3Skill_F, 25.0);
			Gaussian vdouble39_F = default(Gaussian);
			// Message to 'vdouble39' from GaussianFromMeanAndVariance factor
			vdouble39_F = GaussianFromMeanAndVarianceOp.SampleAverageConditional(Player1Skill_F, 25.0);
			Gaussian vdouble44_F = Gaussian.Uniform();
			Gaussian vdouble44_use_B = Gaussian.Uniform();
			Gaussian[] vdouble41_uses_F;
			// Create array for 'vdouble41_uses' Forwards messages.
			vdouble41_uses_F = new Gaussian[2];
			vdouble41_uses_F[1] = Gaussian.Uniform();
			Gaussian vdouble45_F = Gaussian.Uniform();
			Gaussian vdouble45_use_B = Gaussian.Uniform();
			this.vdouble41_uses_B[1] = Gaussian.Uniform();
			vdouble41_uses_F[0] = Gaussian.Uniform();
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				// Message to 'vdouble41_uses' from Replicate factor
				vdouble41_uses_F[1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.vdouble41_uses_B, vdouble41_F, 1, vdouble41_uses_F[1]);
				// Message to 'vdouble45' from Difference factor
				vdouble45_F = DoublePlusOp.AAverageConditional(vdouble41_uses_F[1], vdouble43_F);
				// Message to 'vdouble45_use' from IsPositive factor
				vdouble45_use_B = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(this.Vbool4), vdouble45_F);
				// Message to 'vdouble41_uses' from Difference factor
				this.vdouble41_uses_B[1] = DoublePlusOp.SumAverageConditional(vdouble45_use_B, vdouble43_F);
				// Message to 'vdouble41_uses' from Replicate factor
				vdouble41_uses_F[0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.vdouble41_uses_B, vdouble41_F, 0, vdouble41_uses_F[0]);
				// Message to 'vdouble44' from Difference factor
				vdouble44_F = DoublePlusOp.AAverageConditional(vdouble39_F, vdouble41_uses_F[0]);
				// Message to 'vdouble44_use' from IsPositive factor
				vdouble44_use_B = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(this.Vbool3), vdouble44_F);
				// Message to 'vdouble41_uses' from Difference factor
				this.vdouble41_uses_B[0] = DoublePlusOp.BAverageConditional(vdouble39_F, vdouble44_use_B);
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			Gaussian vdouble39_use_B = default(Gaussian);
			// Message to 'vdouble39_use' from Difference factor
			vdouble39_use_B = DoublePlusOp.SumAverageConditional(vdouble44_use_B, vdouble41_uses_F[0]);
			// Message to 'Player1Skill_use' from GaussianFromMeanAndVariance factor
			Player1Skill_use_B = GaussianFromMeanAndVarianceOp.MeanAverageConditional(vdouble39_use_B, 25.0);
			// Message to 'Player1Skill_marginal' from Variable factor
			this.Player1Skill_marginal_F = VariableOp.MarginalAverageConditional<Gaussian>(Player1Skill_use_B, Player1Skill_F, this.Player1Skill_marginal_F);
			this.Player2Skill_marginal_F = Gaussian.Uniform();
			Gaussian Player2Skill_use_B = default(Gaussian);
			Gaussian vdouble41_use_B = Gaussian.Uniform();
			// Message to 'vdouble41_use' from Replicate factor
			vdouble41_use_B = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(this.vdouble41_uses_B, vdouble41_use_B);
			// Message to 'Player2Skill_use' from GaussianFromMeanAndVariance factor
			Player2Skill_use_B = GaussianFromMeanAndVarianceOp.MeanAverageConditional(vdouble41_use_B, 25.0);
			// Message to 'Player2Skill_marginal' from Variable factor
			this.Player2Skill_marginal_F = VariableOp.MarginalAverageConditional<Gaussian>(Player2Skill_use_B, Player2Skill_F, this.Player2Skill_marginal_F);
			this.Player3Skill_marginal_F = Gaussian.Uniform();
			Gaussian Player3Skill_use_B = default(Gaussian);
			Gaussian vdouble43_use_B = default(Gaussian);
			// Message to 'vdouble43_use' from Difference factor
			vdouble43_use_B = DoublePlusOp.BAverageConditional(vdouble41_uses_F[1], vdouble45_use_B);
			// Message to 'Player3Skill_use' from GaussianFromMeanAndVariance factor
			Player3Skill_use_B = GaussianFromMeanAndVarianceOp.MeanAverageConditional(vdouble43_use_B, 25.0);
			// Message to 'Player3Skill_marginal' from Variable factor
			this.Player3Skill_marginal_F = VariableOp.MarginalAverageConditional<Gaussian>(Player3Skill_use_B, Player3Skill_F, this.Player3Skill_marginal_F);
			this.vdouble39_marginal_F = Gaussian.Uniform();
			// Message to 'vdouble39_marginal' from Variable factor
			this.vdouble39_marginal_F = VariableOp.MarginalAverageConditional<Gaussian>(vdouble39_use_B, vdouble39_F, this.vdouble39_marginal_F);
			this.vdouble41_marginal_F = Gaussian.Uniform();
			// Message to 'vdouble41_marginal' from Variable factor
			this.vdouble41_marginal_F = VariableOp.MarginalAverageConditional<Gaussian>(vdouble41_use_B, vdouble41_F, this.vdouble41_marginal_F);
			this.vdouble43_marginal_F = Gaussian.Uniform();
			// Message to 'vdouble43_marginal' from Variable factor
			this.vdouble43_marginal_F = VariableOp.MarginalAverageConditional<Gaussian>(vdouble43_use_B, vdouble43_F, this.vdouble43_marginal_F);
			this.vdouble44_marginal_F = Gaussian.Uniform();
			// Message to 'vdouble44_marginal' from DerivedVariable factor
			this.vdouble44_marginal_F = DerivedVariableOp.MarginalAverageConditional<Gaussian>(vdouble44_use_B, vdouble44_F, this.vdouble44_marginal_F);
			this.vdouble45_marginal_F = Gaussian.Uniform();
			// Message to 'vdouble45_marginal' from DerivedVariable factor
			this.vdouble45_marginal_F = DerivedVariableOp.MarginalAverageConditional<Gaussian>(vdouble45_use_B, vdouble45_F, this.vdouble45_marginal_F);
			this.Changed_numberOfIterations_vbool3_vbool4_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to vbool3 and vbool4</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_vbool3_vbool4(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_vbool3_vbool4_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_vbool3_vbool4_isInitialised)) {
				return ;
			}
			this.vdouble41_uses_B[0] = Gaussian.Uniform();
			this.Changed_numberOfIterationsDecreased_Init_vbool3_vbool4_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_vbool3_vbool4_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of vbool3</summary>
		private void Changed_vbool3()
		{
			if (this.Changed_vbool3_isDone) {
				return ;
			}
			this.vbool3_marginal_F = Bernoulli.Uniform();
			// Message to 'vbool3_marginal' from DerivedVariable factor
			this.vbool3_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli,bool>(this.Vbool3, this.vbool3_marginal_F);
			this.Changed_vbool3_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vbool4</summary>
		private void Changed_vbool4()
		{
			if (this.Changed_vbool4_isDone) {
				return ;
			}
			this.vbool4_marginal_F = Bernoulli.Uniform();
			// Message to 'vbool4_marginal' from DerivedVariable factor
			this.vbool4_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli,bool>(this.Vbool4, this.vbool4_marginal_F);
			this.Changed_vbool4_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			// Create array for 'vdouble41_uses' Backwards messages.
			this.vdouble41_uses_B = new Gaussian[2];
			this.Constant_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_Init_vbool3_vbool4_isDone = false;
				}
				this.Changed_numberOfIterations_vbool3_vbool4_isDone = false;
			}
			this.Changed_vbool4();
			this.Changed_vbool3();
			this.Constant();
			this.Changed_numberOfIterationsDecreased_Init_vbool3_vbool4(initialise);
			this.Changed_numberOfIterations_vbool3_vbool4(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="vbool3") {
				return this.vbool3;
			}
			if (variableName=="vbool4") {
				return this.vbool4;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="vbool4") {
				return this.Vbool4Marginal();
			}
			if (variableName=="vbool3") {
				return this.Vbool3Marginal();
			}
			if (variableName=="Player1Skill") {
				return this.Player1SkillMarginal();
			}
			if (variableName=="Player2Skill") {
				return this.Player2SkillMarginal();
			}
			if (variableName=="Player3Skill") {
				return this.Player3SkillMarginal();
			}
			if (variableName=="vdouble39") {
				return this.Vdouble39Marginal();
			}
			if (variableName=="vdouble41") {
				return this.Vdouble41Marginal();
			}
			if (variableName=="vdouble43") {
				return this.Vdouble43Marginal();
			}
			if (variableName=="vdouble44") {
				return this.Vdouble44Marginal();
			}
			if (variableName=="vdouble45") {
				return this.Vdouble45Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>
		/// Returns the marginal distribution for 'Player1Skill' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Player1SkillMarginal()
		{
			return this.Player1Skill_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'Player2Skill' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Player2SkillMarginal()
		{
			return this.Player2Skill_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'Player3Skill' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Player3SkillMarginal()
		{
			return this.Player3Skill_marginal_F;
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="vbool3") {
				this.vbool3 = (bool)value;
				return ;
			}
			if (variableName=="vbool4") {
				this.vbool4 = (bool)value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool3' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool3Marginal()
		{
			return this.vbool3_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool4' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool4Marginal()
		{
			return this.vbool4_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble39' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble39Marginal()
		{
			return this.vdouble39_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble41' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble41Marginal()
		{
			return this.vdouble41_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble43' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble43Marginal()
		{
			return this.vdouble43_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble44' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble44Marginal()
		{
			return this.vdouble44_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble45' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble45Marginal()
		{
			return this.vdouble45_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
