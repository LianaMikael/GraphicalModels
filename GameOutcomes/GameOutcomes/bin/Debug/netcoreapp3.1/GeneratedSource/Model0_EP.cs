// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.4.2203.202 at 11:05 PM on Thursday, June 16, 2022.
	/// </remarks>
	public partial class Model0_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Changed_vbool1 has executed. Set this to false to force re-execution of Changed_vbool1</summary>
		public bool Changed_vbool1_isDone;
		/// <summary>Message to marginal of 'FSkill'</summary>
		public Gaussian FSkill_marginal_F;
		/// <summary>Message to marginal of 'JSkill'</summary>
		public Gaussian JSkill_marginal_F;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the vbool1 property</summary>
		private bool Vbool1;
		/// <summary>Message to marginal of 'vbool1'</summary>
		public Bernoulli vbool1_marginal_F;
		/// <summary>Message to marginal of 'vdouble14'</summary>
		public Gaussian vdouble14_marginal_F;
		/// <summary>Message to marginal of 'vdouble16'</summary>
		public Gaussian vdouble16_marginal_F;
		/// <summary>Message to marginal of 'vdouble17'</summary>
		public Gaussian vdouble17_marginal_F;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'vbool1'</summary>
		public bool vbool1
		{
			get {
				return this.Vbool1;
			}
			set {
				if (this.Vbool1!=value) {
					this.Vbool1 = value;
					this.numberOfIterationsDone = 0;
					this.Changed_vbool1_isDone = false;
				}
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of vbool1</summary>
		private void Changed_vbool1()
		{
			if (this.Changed_vbool1_isDone) {
				return ;
			}
			Gaussian JSkill_F = default(Gaussian);
			this.JSkill_marginal_F = Gaussian.Uniform();
			Gaussian JSkill_use_B = default(Gaussian);
			// Message to 'JSkill' from GaussianFromMeanAndVariance factor
			JSkill_F = GaussianFromMeanAndVarianceOp.SampleAverageConditional(120.0, 1600.0);
			Gaussian FSkill_F = default(Gaussian);
			// Message to 'FSkill' from GaussianFromMeanAndVariance factor
			FSkill_F = GaussianFromMeanAndVarianceOp.SampleAverageConditional(100.0, 25.0);
			Gaussian vdouble16_F = default(Gaussian);
			// Message to 'vdouble16' from GaussianFromMeanAndVariance factor
			vdouble16_F = GaussianFromMeanAndVarianceOp.SampleAverageConditional(FSkill_F, 25.0);
			Gaussian vdouble14_F = default(Gaussian);
			// Message to 'vdouble14' from GaussianFromMeanAndVariance factor
			vdouble14_F = GaussianFromMeanAndVarianceOp.SampleAverageConditional(JSkill_F, 25.0);
			Gaussian vdouble17_F = default(Gaussian);
			// Message to 'vdouble17' from Difference factor
			vdouble17_F = DoublePlusOp.AAverageConditional(vdouble14_F, vdouble16_F);
			Gaussian vdouble17_use_B = default(Gaussian);
			// Message to 'vdouble17_use' from IsPositive factor
			vdouble17_use_B = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(this.Vbool1), vdouble17_F);
			Gaussian vdouble14_use_B = default(Gaussian);
			// Message to 'vdouble14_use' from Difference factor
			vdouble14_use_B = DoublePlusOp.SumAverageConditional(vdouble17_use_B, vdouble16_F);
			// Message to 'JSkill_use' from GaussianFromMeanAndVariance factor
			JSkill_use_B = GaussianFromMeanAndVarianceOp.MeanAverageConditional(vdouble14_use_B, 25.0);
			// Message to 'JSkill_marginal' from Variable factor
			this.JSkill_marginal_F = VariableOp.MarginalAverageConditional<Gaussian>(JSkill_use_B, JSkill_F, this.JSkill_marginal_F);
			this.FSkill_marginal_F = Gaussian.Uniform();
			Gaussian FSkill_use_B = default(Gaussian);
			Gaussian vdouble16_use_B = default(Gaussian);
			// Message to 'vdouble16_use' from Difference factor
			vdouble16_use_B = DoublePlusOp.BAverageConditional(vdouble14_F, vdouble17_use_B);
			// Message to 'FSkill_use' from GaussianFromMeanAndVariance factor
			FSkill_use_B = GaussianFromMeanAndVarianceOp.MeanAverageConditional(vdouble16_use_B, 25.0);
			// Message to 'FSkill_marginal' from Variable factor
			this.FSkill_marginal_F = VariableOp.MarginalAverageConditional<Gaussian>(FSkill_use_B, FSkill_F, this.FSkill_marginal_F);
			this.vdouble14_marginal_F = Gaussian.Uniform();
			// Message to 'vdouble14_marginal' from Variable factor
			this.vdouble14_marginal_F = VariableOp.MarginalAverageConditional<Gaussian>(vdouble14_use_B, vdouble14_F, this.vdouble14_marginal_F);
			this.vdouble16_marginal_F = Gaussian.Uniform();
			// Message to 'vdouble16_marginal' from Variable factor
			this.vdouble16_marginal_F = VariableOp.MarginalAverageConditional<Gaussian>(vdouble16_use_B, vdouble16_F, this.vdouble16_marginal_F);
			this.vdouble17_marginal_F = Gaussian.Uniform();
			// Message to 'vdouble17_marginal' from DerivedVariable factor
			this.vdouble17_marginal_F = DerivedVariableOp.MarginalAverageConditional<Gaussian>(vdouble17_use_B, vdouble17_F, this.vdouble17_marginal_F);
			this.vbool1_marginal_F = Bernoulli.Uniform();
			// Message to 'vbool1_marginal' from DerivedVariable factor
			this.vbool1_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli,bool>(this.Vbool1, this.vbool1_marginal_F);
			this.Changed_vbool1_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			this.Changed_vbool1();
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>
		/// Returns the marginal distribution for 'FSkill' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian FSkillMarginal()
		{
			return this.FSkill_marginal_F;
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="vbool1") {
				return this.vbool1;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'JSkill' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian JSkillMarginal()
		{
			return this.JSkill_marginal_F;
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="JSkill") {
				return this.JSkillMarginal();
			}
			if (variableName=="FSkill") {
				return this.FSkillMarginal();
			}
			if (variableName=="vdouble14") {
				return this.Vdouble14Marginal();
			}
			if (variableName=="vdouble16") {
				return this.Vdouble16Marginal();
			}
			if (variableName=="vdouble17") {
				return this.Vdouble17Marginal();
			}
			if (variableName=="vbool1") {
				return this.Vbool1Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="vbool1") {
				this.vbool1 = (bool)value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool1' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool1Marginal()
		{
			return this.vbool1_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble14' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble14Marginal()
		{
			return this.vdouble14_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble16' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble16Marginal()
		{
			return this.vdouble16_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble17' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble17Marginal()
		{
			return this.vdouble17_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
